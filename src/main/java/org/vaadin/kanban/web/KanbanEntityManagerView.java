package org.vaadin.kanban.web;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.vaadin.kanban.KanbanBoard;
import org.vaadin.navigator.Navigator;

import com.vaadin.Application;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.spring.roo.addon.annotations.RooVaadinEntityManagerView;
import com.vaadin.spring.roo.addon.annotations.RooVaadinEntityView;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

/**
 * Entity manager view that by default automatically discovers all entity views
 * (classes with the {@link RooVaadinEntityView} annotation) and lets the user
 * choose one of them to display.
 * 
 * An entity view must implement the {@link Navigator.View} interface to be
 * automatically added to the view list.
 * 
 * This class is designed to be compatible with the Vaadin Visual Editor.
 * 
 * All methods and fields not marked with the {@link AutoGenerated} annotation
 * can be modified freely.
 * 
 * If you are planning to use the visual editor, do not touch the methods marked
 * with the {@link AutoGenerated} annotation - they will be removed and
 * re-generated when saving the class from the visual editor. Instead, add any
 * custom code to methods called from the constructor after the initial view
 * construction.
 * 
 * If you will not use the Vaadin Visual Editor to edit this class, all the
 * {@link AutoGenerated} annotations can be removed.
 */
@RooVaadinEntityManagerView
public class KanbanEntityManagerView extends CustomComponent implements
        Navigator.ViewChangeListener {

    @AutoGenerated
    private HorizontalSplitPanel mainLayout;
    @AutoGenerated
    private CssLayout viewList;

    private List<MenuItem> menuItems = new ArrayList<MenuItem>();

    private Navigator navigator;

    private interface MenuItem extends Component {
        public Class<? extends Navigator.View> getViewClass();
    }

    private class EntityMenuItem extends AbsoluteLayout implements MenuItem {
        private Button selectButton = new NativeButton();
        private Button newButton = new NativeButton("New");
        private final Class<? extends Navigator.View> viewClass;

        public EntityMenuItem(final String viewName,
                Class<? extends Navigator.View> viewClass) {
            this.viewClass = viewClass;
            setHeight("36px");
            setWidth("100%");
            addStyleName("menu-item");
            selectButton.setCaption(viewName);
            newButton.addStyleName("new");
            newButton.setVisible(false);
            newButton.setEnabled(false);
            addComponent(selectButton, "top: 0; left: 0; right: 0;");
            addComponent(newButton, "top: 8px; right: 9px;");

            selectButton.addListener(new Button.ClickListener() {
                @Override
                public void buttonClick(ClickEvent event) {
                    navigator.navigateTo(viewName);
                }
            });

            newButton.addListener(new Button.ClickListener() {
                @Override
                public void buttonClick(ClickEvent event) {
                    navigator.navigateTo(viewName + "/new");
                }
            });
        }

        public Button getNewButton() {
            return newButton;
        }

        @Override
        public Class<? extends Navigator.View> getViewClass() {
            return viewClass;
        }
    }

    private class KanbanMenuItem extends AbsoluteLayout implements MenuItem {
        private Button selectButton = new NativeButton();

        public KanbanMenuItem() {
            setHeight("36px");
            setWidth("100%");
            addStyleName("menu-item");
            selectButton.setCaption("Kanban Board");
            addComponent(selectButton, "top: 0; left: 0; right: 0;");

            selectButton.addListener(new Button.ClickListener() {
                @Override
                public void buttonClick(ClickEvent event) {
                    navigator.navigateTo("board");
                }
            });
        }

        @Override
        public Class<? extends Navigator.View> getViewClass() {
            return KanbanBoard.class;
        }
    }

    public static class WelcomeView extends VerticalLayout implements
            Navigator.View {
        public WelcomeView() {
            setMargin(true);
            setSizeFull();
            addStyleName(Reindeer.LAYOUT_BLUE);
            Label l = new Label(
                    "<h1 class=\"v-label-h1\" style=\"text-align: center;\">Welcome</h1> Select an entity type from the left side menu to begin",
                    Label.CONTENT_XHTML);
            l.setSizeUndefined();
            l.addStyleName(Reindeer.LABEL_SMALL);
            addComponent(l);
            setComponentAlignment(l, Alignment.MIDDLE_CENTER);
        }

        @Override
        public void init(Navigator navigator, Application application) {
            // nothing to do
        }

        @Override
        public void navigateTo(String requestedDataId) {
            // no subpages
        }

        @Override
        public String getWarningForNavigatingFrom() {
            return null;
        }
    }

    /**
     * First build the main layout and set the composition root to support the
     * visual editor. Then do any custom initialization.
     * 
     * The constructor will not be automatically regenerated by the visual
     * editor, and may be edited by the developer.
     */
    public KanbanEntityManagerView() {
        setSizeFull();

        navigator = new Navigator();
        navigator.addListener(this);

        // build the layout based on the visual editor
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // add entity views to the list
        addEntityViewsToList();

        // TODO add user code here
    }

    @Override
    public void navigatorViewChange(Navigator.View previous,
            Navigator.View current) {
        boolean allowCreate = false;
        if (current instanceof AbstractEntityView) {
            allowCreate = ((AbstractEntityView) current).isCreateAllowed();
        }
        for (MenuItem item : menuItems) {
            boolean canCreate = false;
            if (current != null
                    && item.getViewClass().isAssignableFrom(current.getClass())) {
                item.addStyleName("open");
                canCreate = allowCreate;
            } else {
                item.removeStyleName("open");
            }
            if (item instanceof EntityMenuItem) {
                EntityMenuItem entityMenuItem = (EntityMenuItem) item;
                entityMenuItem.getNewButton().setEnabled(canCreate);
                entityMenuItem.getNewButton().setVisible(canCreate);
            }
        }
    }

    /**
     * List all the entity views (classes annotated with
     * {@link RooVaadinEntityView}) and add them to the list on the left as
     * buttons. Clicking on one will open a new instance of that entity view in
     * the main view area.
     */
    private void addEntityViewsToList() {
        final Map<String, Class> entityViews = listEntityViews();
        navigator.addView("welcome", WelcomeView.class);
        navigator.addView("board", KanbanBoard.class);
        KanbanMenuItem kanbanMenuItem = new KanbanMenuItem();
        menuItems.add(kanbanMenuItem);
        viewList.addComponent(kanbanMenuItem);
        for (final String key : entityViews.keySet()) {
            Class viewClass = entityViews.get(key);

            if (Navigator.View.class.isAssignableFrom(viewClass)) {
                navigator.addView(key, viewClass);

                EntityMenuItem menuItem = new EntityMenuItem(key, viewClass);
                menuItems.add(menuItem);
                viewList.addComponent(menuItem);
            }
        }
        navigator.setMainView("welcome");
    }

    @AutoGenerated
    private HorizontalSplitPanel buildMainLayout() {
        // common part: create layout
        mainLayout = new HorizontalSplitPanel();
        mainLayout.addStyleName(Reindeer.SPLITPANEL_SMALL);
        mainLayout.addStyleName("main");

        // sidebar entity menu
        VerticalLayout sidebar = new VerticalLayout();
        sidebar.setSizeFull();
        sidebar.addStyleName(Reindeer.LAYOUT_BLUE);
        sidebar.addStyleName("sidebar");

        // viewList
        viewList = new CssLayout();
        viewList.setWidth("100%");
        viewList.addStyleName("view-list");

        Panel scroll = new Panel();
        scroll.addStyleName(Reindeer.PANEL_LIGHT);
        scroll.setSizeFull();
        scroll.setContent(viewList);

        // application header/name
        Label appName = new Label("Welcome", Label.CONTENT_XHTML);
        appName.addStyleName(Reindeer.LABEL_H1);
        viewList.addComponent(appName);

        sidebar.addComponent(appName);
        sidebar.addComponent(scroll);
        sidebar.setExpandRatio(scroll, 1);

        mainLayout.setFirstComponent(sidebar);

        // viewArea
        mainLayout.setSecondComponent(navigator);
        mainLayout.setSplitPosition(17);

        return mainLayout;
    }

}